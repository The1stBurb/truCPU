# print("c",0,0)
displayMode=manual
setFile("4x6.fnt")
var font_w=0
var font_h=0
var font_bits=0
font_w=getData(0)
font_h=getData(1)
font_bits=getData(2)

# fill(9,1,1)
# print("C",2,40)
# print("r",8,40)
# print("i",13,40)
# print("m",18,40)
# print("s",23,40)
# print("o",28,40)
# print("n",33,40)
# disp()
# fill(4,7,6)
# print("T",38,40)
# print("r",43,40)
# print("e",48,40)
# print("e",53,40)
# disp()
# fill(3,4,14)
# print("O",58,40)
# print("S",63,40)
# disp()
# renderImg(15,5,1,1)
# sleep(50)
fill(0,0,0)
print("U",0,50)
print("s",5,50)
print("e",10,50)
print("r",15,50)
print("n",20,50)
print("a",25,50)
print("m",30,50)
print("e",35,50)
print(":",40,50)
disp()
var usri=0
var usrx=0
var usr=""
var ky=0
var pky=0
var inpLen=0
var ix=0
flag clearUsr
for i 0 <inpLen +=1
    # debug(i,0)
    ix=mult(i,5)
    ix=add(ix,50)
    print(usr[i],ix,50)
frd
flag inputText
inpLen=len(usr)
# debug(inpLen)
# print(usrx,50)
usrx=mult(usri,5)
usrx=add(50,usrx)
flag inputText2
ky=key()
if ky==pky
    goto inputText2
ifd
debug(ky,0)
if ky==105
    goto checks
ifd
if ky!=0
    # usr.push(ky)
    # debug(ky)
    print(ky,usrx,50)
    disp()
    usri+=1
ifd
pky=ky
sleep(10)
goto inputText
flag checks
# debug(123)
var username="Fish"
var checkLen=0
# var inpLen=0
# debug(126)
inpLen=len(usr)
# debug(125)
var userLen=0
userLen=len(username)
# debug(124)
if userLen!=inpLen
    goto wrongUser
ifd
# for i 0 <checkLen
goto rightUser
flag wrongUser
fill(14,1,1)
print("\ksp[u",3,60)
print("\ksp[s",8,60)
print("\ksp[e",13,60)
print("\ksp[r",18,60)
print("\ksp[n",23,60)
print("\ksp[a",28,60)
print("\ksp[m",33,60)
print("\ksp[e",38,60)
print("\ksp[w",48,60)
print("\ksp[r",53,60)
print("\ksp[o",58,60)
print("\ksp[n",63,60)
print("\ksp[g",68,60)
disp()
# usr.clear()
# usr[0]="f"
sleep(10)
goto clearusr
flag rightUser
fill(1,14,1)
print("C",3,60)
print("o",8,60)
print("r",13,60)
print("r",18,60)
print("e",23,60)
print("c",28,60)
print("t",33,60)
print("!",38,60)
sleep(5)
goto START
flag START
loadFile("main.py")
flag END
# pxl(0,0)

# loadFile("snek.burb")
# fill(0,0,0)
# print("L",1,60)
# print("o",6,60)
# print("a",11,60)
# print("d",16,60)
# print("i",21,60)
# print("n",26,60)
# print("g",31,60)
# print(".",36,60)
# print(".",41,60)
# print(".",46,60)
# disp()
# str(x,"a")
# str.__push__(x,"b")
# var y=0
# y=str[x,0]
# debug(y)
# y=str[x,1]
# debug(y)
# def str(|variable|,value)
#     var variable.len=0
#     str.__push__(variable,value)
# fcd
# def str.__push__(|variable|,value)
#     var addVal_len=0
#     addVal_len=variable.len
#     var variable.v/addVal_len/=value
# fcd
# def str.__get__(|variable|,index)
#     return variable.v/index/
# fcd
# def print(printx,printy)
#     var printLen=0
#     printLen=len(text)
#     for i 0 <text +=1
#         printLtr(text[i])
#     frd
# fcd
def print(print_text,print_x,print_y)
    # pxl(print_text,0)
    var print_tx=print_x
    var print_ty=print_y
    var print_data=print_text
    # debug(print_data)
    print_data=sub(print_data,1)
    # debug(print_data,0)
    print_data=mult(print_data,font_bits)
    # debug(print_data)
    print_data=add(print_data,3)
    # print_data=add(print_data,3)
    # debug(print_data)
    var print_bit=0
    for print_i 0 <font_bits +=1
        print_data=add(print_data,print_i)
        print_bit=getData(print_data)
        var print_temp=print_bit
        print_temp=SHL(print_temp,0)
        print_temp=SHR(print_temp,12)
        printOne(print_temp,print_x,print_y)
        print_y+=1
        print_temp=print_bit
        print_temp=SHL(print_temp,4)
        print_temp=SHR(print_temp,12)
        printOne(print_temp,print_x,print_y)
        print_y+=1
        print_temp=print_bit
        print_temp=SHL(print_temp,8)
        print_temp=SHR(print_temp,12)
        printOne(print_temp,print_x,print_y)
        print_y+=1
        print_temp=print_bit
        print_temp=SHL(print_temp,12)
        print_temp=SHR(print_temp,12)
        printOne(print_temp,print_x,print_y)
        print_y+=1
    frd
    # disp()
fcd
def printOne(printOne_val,printOne_x,printOne_y)
    # debug(printOne_val)
    var printOne_col=COLOUR
    # debug(COLOUR,0)
    # debug(printOne_col)
    COLOUR=BGCOLOUR
    if printOne_val>7
        COLOUR=printOne_col
        printOne_val-=8
    ifd
    pxl(printOne_x,printOne_y)
    printOne_x+=1
    COLOUR=BGCOLOUR
    if printOne_val>3
        COLOUR=printOne_col
        printOne_val-=4
    ifd
    pxl(printOne_x,printOne_y)
    printOne_x+=1
    COLOUR=BGCOLOUR
    if printOne_val>1
        COLOUR=printOne_col
        printOne_val-=2
    # else
    ifd
    pxl(printOne_x,printOne_y)
    printOne_x+=1
    COLOUR=BGCOLOUR
    if printOne_val>0
        COLOUR=printOne_col
    ifd
    pxl(printOne_x,printOne_y)
    printOne_x+=1
    COLOUR=printOne_col
fcd
def renderImg(renderImg_x,renderImg_y,renderImg_scale,renderImg_file)
    # debug(renderImg_file)
    setFile(renderImg_file)
    # pxl(renderImg_file,0)
    var renderImg_w=0
    renderImg_w=getData(0)
    # pxl(renderImg_w,1)
    var renderImg_h=0
    renderImg_h=getData(1)
    # pxl(renderImg_h,2)
    var renderImg_ind=2
    var renderImg_dat=0
    var renderImg_tmx=0
    renderImg_tmx=renderImg_x
    # disp()
    for renderImg_iy 0 <renderImg_h +=1
        for renderImg_ix 0 <renderImg_w +=1
            COLOUR=getData(renderImg_ind)
            renderImg_ind+=1
            # pxl(renderImg_ind,50)
            # debug(COLOUR)
            #add(renderImg_ind,1)
            pxl(renderImg_x,renderImg_y,2,2)
            # rect(renderImg_x,renderImg_y,renderImg_scale,renderImg_scale)
            renderImg_x=add(renderImg_x,renderImg_scale)
            # disp()
        frd
        # disp()
        renderImg_x=renderImg_tmx
        renderImg_y=add(renderImg_y,renderImg_scale)
    frd
    disp()
fcd
def mult(mult_a,mult_b)
    var mult_x=0
    var mult_a1=0
    var mult_b1=0
    mult_a1=mult_a
    mult_b1=mult_b
    # if mult_a>mult_b
    #     mult_a1=mult_a
    #     mult_b1=mult_b
    # ifd
    if mult_b>mult_a
        mult_a1=mult_b
        mult_b1=mult_a
    ifd
    # if mult_b==mult_a
    #     mult_a1=mult_a
    #     mult_b1=mult_b
    # ifd
    for mult_i 0 <mult_b1 +=1
        # shl(mult_x)
        mult_x+=mult_a1
    frd
    return mult_x
fcd
def add(add_a,add_b)
    add_a+=add_b
    return add_a
fcd
def div(div_a,div_b)
    var div_t=0
    while div_a>div_b
        div_a-=div_b
        div_t+=1
    whd
    # pxl(div_t,3)
    return div_t
fcd
def sub(sub_a,sub_b)
    sub_a-=sub_b
    return sub_a
fcd
def fill(fill_red,fill_green,fill_blue) 
    var fill_temp=0
    # fill_red=div(fill_red,17)
    # fill_green=div(fill_green,17)
    # fill_blue=div(fill_green,17)
    COLOUR=fill_blue
    fill_temp=mult(fill_green,16)
    COLOUR=add(COLOUR,fill_temp)
    fill_temp=mult(fill_red,256)
    # fill_temp=mult(fill_temp,16)
    COLOUR=add(COLOUR,fill_temp)
fcd
def rect(rect_x,rect_y,rect_w,rect_h)
    var rect_x2=0
    # rect_x2=add(rect_x,rect_w)
    var rect_y2=0
    # rect_y2=add(rect_y,rect_h)
    for rect_iy 0 <=rect_h +=1
        for rect_ix 0 <=rect_h +=1
            rect_x2=add(rect_ix,rect_x)
            rect_y2=add(rect_iy,rect_y)
            pxl(rect_x2,rect_y2)
        frd
    frd
    # disp()
fcd
def sleep(sleep_tenthSecond)
    sleep_tenthSecond=mult(sleep_tenthSecond,3)
    var sleep_temp=0
    for i 0 <sleep_tenthSecond +=1
        sleep_temp=mult(20,20)#10-approx 3.4, #1- apporx 0.35 but was for 10x input, now is proper lol
        # debug(sleep_temp)
    frd
fcd
def min(min_n1,min_n2)
    if min_n2>min_n1
        return min_n1
    ifd
    return min_n2
fcd
# \ksp[u